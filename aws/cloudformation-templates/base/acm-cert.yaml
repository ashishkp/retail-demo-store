AWSTemplateFormatVersion: 2010-09-09

Description: >
    This template deploys the SSL/TLS selfsigned certificate for Retail Demo Store ELBs to ACM
    Author: Ronak Shah <ronakbsh@amazon.com>
 
Resources:
    ACMimportCertLambdaFunction:
        Type: 'AWS::Lambda::Function'
        Properties:
          Description: 'Retail Demo Store acm-import-certificate function that returns ARN for imported certificate'
          Code:
            ZipFile: |
              import boto3
              import cfnresponse
              
              from botocore.exceptions import ClientError
              
              response_data = {}

              acm_client = boto3.client('acm')
              ssm_client = boto3.client('ssm')

              myCertificate="""-----BEGIN CERTIFICATE-----
              MIIDCDCCAfCgAwIBAgIJAOfVqeMFgjUeMA0GCSqGSIb3DQEBBQUAMCsxKTAnBgNV
              BAMTIHJldGFpbC1kZW1vLXJvbmFrYnNoLmV4YW1wbGUuY29tMB4XDTIyMDIyMTE1
              MDExMVoXDTMyMDIxOTE1MDExMVowKzEpMCcGA1UEAxMgcmV0YWlsLWRlbW8tcm9u
              YWtic2guZXhhbXBsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
              AQDgQZBxF3CRCa1QBGD5khh+GtlLmOTK4XlaFDVzz+uMxvV3rbocVO9ApFQETkH2
              TAZfIbf8IF0n1uOwWvRDLrW3ZyUF4CEtX07li4MPibLhLU2DNDOKMXQ9Nk5TMQEZ
              WORRSzYAz3eIZ7i8znKi1dOQtMR2eFAzrJPOCTcDHMCl9FxNk9WyLDQwPVv1jGDN
              yZk/4sPe2+028w5pq8KXrDQ5V/mJBNr+2QYRoBzuOuPLMjRGgb6+8+BOexyiPNgn
              patn743NZx6bgPrweK3d31jMvy5HGIJmwfDyCCFD18jS0wmlxbLbFcUwrz0NhVyO
              zlrmKNfY3H2cTms/xp3NiTGTAgMBAAGjLzAtMCsGA1UdEQQkMCKCIHJldGFpbC1k
              ZW1vLXJvbmFrYnNoLmV4YW1wbGUuY29tMA0GCSqGSIb3DQEBBQUAA4IBAQCzZMQb
              SqQuMnXsUNu4mguag+0U8QyjTR6+j4pkWN5/5yU8AeddW0PacXx9D/B68pIHkjGY
              hb3x6ak5T+heHh7E/W3p7/Wdv4B7rw2csdr1Bi/26uy6ZtyO+DYrZrI2L0ISVAf9
              gSHX7Jv+Q+hoKAGRi8iwY3K/pc94twRmUB/G8r/neJ/9bH5AXNvvY4ngDnNDz74/
              hi0vWeLzgZMh1MoADLxeOPCOVY3tyNpsBvkD+HioCGMdSJpzEha9V5acMXvEXgQJ
              HnQIg44f29LBearLgzPZw94oiwiioDHCDHV56lWh12nst5FHVeHr7UTuoGk7RWzr
              v7ntByw9wVc48rMz
              -----END CERTIFICATE-----"""

              myPrivateKey="""-----BEGIN RSA PRIVATE KEY-----
              MIIEowIBAAKCAQEA4EGQcRdwkQmtUARg+ZIYfhrZS5jkyuF5WhQ1c8/rjMb1d626
              HFTvQKRUBE5B9kwGXyG3/CBdJ9bjsFr0Qy61t2clBeAhLV9O5YuDD4my4S1NgzQz
              ijF0PTZOUzEBGVjkUUs2AM93iGe4vM5yotXTkLTEdnhQM6yTzgk3AxzApfRcTZPV
              siw0MD1b9YxgzcmZP+LD3tvtNvMOaavCl6w0OVf5iQTa/tkGEaAc7jrjyzI0RoG+
              vvPgTnscojzYJ6WrZ++NzWcem4D68Hit3d9YzL8uRxiCZsHw8gghQ9fI0tMJpcWy
              2xXFMK89DYVcjs5a5ijX2Nx9nE5rP8adzYkxkwIDAQABAoIBAGWR7Iz8U9StMF1E
              jnObExLSsEaIKmAlfWQqMQeSTZqGZpldCyVX5sE9bHxCwad/SYd+6yj7s5Wew6OV
              nnprRoyZ3+/oUr6NI1veM28vK+DHNwtM8mcN/RrYZONTF69WTprvWLdHQFl8uPRz
              AQL1nAw3g6Aw4Ap3iL5R+COluy+uQ5+VwzH+Ezk22htrkDSqFzNsRBo1trW4clxh
              MLPuMDQKahq/KNY438R8o8ZDsF7tqHoVQCwx8t6HMtOtF20Ea8TRDFt8KzSJM/ex
              +uOJAlIrPnfgDlXVM7NMh5wO3kv0WOuLBRSzt0fKri8frmG0ZIz1meh76a5pHswX
              DTQPFuECgYEA9Z3IHTQC1mQqqHgpISinkmSNhYIU6f375zniud1SkmJwEqMPBvu/
              5UE9qCoXhP8DdqPJe3e1x77IrKUeUm5KgGfUwcgC5kqiBrRlPcvJLEr7gthv8880
              qKNJL+OLgFECdHrg2CrDSW3vIb21joGRCbSwo6KcJdIzGNtTpES4hdECgYEA6byb
              wNfqACZ08Ix1HPSa1LFEduivX6Ws6+3w/ZNRFY1Momsr5gZ7P7HyAhH6hPSdI5im
              FInZJ5bzGcMuR0PFgDd5rovyI2MKBTD1njLPCClvskU7CHlRiUNDxOCicEaporwa
              xxRBcQ/hHNtznRZZUY+hUWNDk1+Ex67sNNFsBiMCgYBoNMn7Qd7WUOccVOa2T8ZQ
              wOKeOyNeZ0ihwJhl3PW0b5k2/wFYKCUxQe3D1B/oaD1y72iDPrXcCiCfxupHdM2d
              DvBgStiYFiAKEi1F+5jddu6gg+1zlnyz85sQe0zrYvNUsfGFJRd3pvGm8hL+ZBBB
              +uxacJopHbZaHGuvLQzQkQKBgQDgDqvjjVZD9JluqcXuDtCJCLDPp7fNYTzFIN89
              xMUaesu2ejOnmhj1cvfBYkiawP4NTFwQHiArIjlBPeeT6vRdN1COsJpZr6vAVDFv
              B9eMRGRNKK4xLlKp2PASvx8Xr7UXSWgF5HXjEszBY+CM+gp+88c5BIWXtR3MaPMG
              oqYBrwKBgB5HjKYkHX8xwvmIgFY0VL4F67U+59nODozTh+MH0b8mAS8oOVFnQthG
              qBjkRroxlL4o0LUqk1JDSWC6DxIQu8qe8a1h9iXagk9LMK8QNWKmquBNRbPaAja6
              NONdMwxP6H3Lki7F4Y7cZ/JjtPCUPpd5EIePkg6bf5E21OoFyfhS
              -----END RSA PRIVATE KEY-----"""

              cert=bytes (myCertificate, 'utf-8')
              pkey=bytes (myPrivateKey, 'utf-8')

              def handler(event, context):
                response_status = cfnresponse.SUCCESS
                acmarn_param_name = '/retaildemostore/acmarn';
                
                try:
                    
                    if event['RequestType'] == 'Create':
                        my_response = acm_client.import_certificate(
                          Certificate=cert,
                          PrivateKey=pkey,
                          Tags=[
                              {
                              'Key': 'ACM',
                              'Value': 'retailDemoStore'
                              },
                          ]
                        )
                        
                        # Create SSM Parameter to store ACM Arn value.
                        acmarn_parameter = ssm_client.put_parameter(
                            Name=acmarn_param_name,
                            Description='Retail Demo Store ACM Arn',
                            Value=my_response['CertificateArn'],
                            Type='String',
                            Overwrite=True,
                            Tier='Standard',
                            DataType='text')
                        
                        response_data['certificate_arn'] = my_response['CertificateArn']
                        response_data['Message'] = "Resource creation succeeded"
                    elif event['RequestType'] == 'Update':
                        response_data['Message'] = "Resource update succeeded"
                    elif event['RequestType'] == 'Delete':
                        # Delete the cert from ACM, assumes all attachments are already removed.
                        
                        # Retrive ACM ARN from Parameter store
                        acmarn_parameter = ssm_client.get_parameter(Name=acmarn_param_name)
                        
                        # Delete ACM
                        my_response = acm_client.delete_certificate(
                            CertificateArn=acmarn_parameter['Parameter']['Value']
                        )
                        
                        # Delete SSM Parameter
                        my_response = ssm_client.delete_parameter(Name=acmarn_param_name)
                        
                        response_data['Message'] = "Resource deletion succeeded"                      
                except ClientError as e:
                  print("Error: " + str(e))
                  response_status = cfnresponse.FAILED
                  response_data['Message'] = "Resource {} failed: {}".format(event['RequestType'], e)

                cfnresponse.send(event, context, response_status, response_data)
          Handler: index.handler            
          Runtime: python3.9
          Timeout: 120
          Role: !GetAtt ACMimportCertLambdaExecutionRole.Arn

    ACMimportCertLambdaExecutionRole:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'    
          Path: /
          Policies:
              - PolicyName: root
                PolicyDocument:
                  Version: 2012-10-17
                  Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource:
                      - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/RetailDemoStore-Chat-Recommendations:log-stream:*'
                      - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/RetailDemoStore-Chat-Recommendations'
                  - Effect: Allow
                    Action:
                      - logs:CreateLogGroup
                    Resource: '*'
                  - Effect: Allow
                    Action:
                      - ssm:PutParameter
                      - ssm:GetParameter
                      - ssm:DeleteParameter
                    Resource: '*'
          ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess'
            
    ACMimportCertLambdaFunctionExecution:
      Type: Custom::CustomLambdaACMCert
      Version: "1.0"
      Properties:
        ServiceToken: !GetAtt ACMimportCertLambdaFunction.Arn

Outputs:
  ACMimportCertLambdaFunctionArn:
    Description: Lambda function ARN for Lex personalization function
    Value: !GetAtt ACMimportCertLambdaFunction.Arn
  ACMimportCertArn:
    Description: ACM self signed cert Arn to use in ELB listener
    Value: !GetAtt ACMimportCertLambdaFunctionExecution.certificate_arn			
